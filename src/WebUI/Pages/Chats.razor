@page "/chats"
@using MudBlazor.Extensions

@inject DataState DataState
@inject StatusAppClient StatusAppClient
@inject SignalRClient SignalR
@inject NotifierService NotifierService
@inject ChatService ChatService

<PageTitle>Chats</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Chats</MudText>

<MudPaper>
    <MudStack Row="true" Style="width: 100%">
        <MudList Style="width: 20%" Clickable="true" SelectedValue="DataState.SelectedFriendshipForChat?.GroupId">
            @foreach (var friendship in DataState.Friendships)
            {
                <MudListItem Value="friendship.GroupId" OnClick="() => SelectChat(friendship)">
                    @($"{friendship.FriendFirstName} {friendship.FriendLastName}")
                </MudListItem>
            }
        </MudList>
        <MudDivider Vertical="true" FlexItem="true" />
        <MudStack Style="width: 80%">
            @if (DataState.SelectedFriendshipForChat is not null && DataState.Messages.ContainsKey(DataState.SelectedFriendshipForChat.GroupId))
            {
                <MudContainer Style="max-height: 55vh; height: 55vh; overflow-y: scroll">
                    <MudList>
                        @foreach (var message in DataState.Messages[DataState.SelectedFriendshipForChat.GroupId])
                        {
                            <MudListItem>
                                <MudText>@message.AuthorUserName</MudText>
                                <MudText>@message.Data</MudText>
                            </MudListItem>
                        }
                    </MudList>
                </MudContainer>
                <MudStack Row="true">
                    <MudTextField @bind-Value="NewMessageString" OnKeyDown="MessageTextFieldHandleEnterKey" Immediate="true" Label="Send a message" Variant="Variant.Outlined"></MudTextField>
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="SendMessage">Send</MudButton>
                </MudStack>
            }
            else
            {
                <MudContainer Style="max-height: 55vh; height: 55vh">
                    <MudText Class="mt-8" Style="align-self: center" Align="Align.Center" Typo="Typo.h5">Select a chat</MudText>
                </MudContainer>
            }
        </MudStack>
    </MudStack>
</MudPaper>


@code {
    public string NewMessageString { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        NotifierService.Notify += OnNotify;
        DataState.Friendships = await StatusAppClient.GetFriendshipsAsync(areFriends: true);
    }
    
    public async Task SelectChat(Friendship friendship)
    {
        await ChatService.SelectChat(friendship);
    }
    
    public async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(NewMessageString))
        {
            return;
        }
        var message = await SignalR.SendMessageAsync(DataState.SelectedFriendshipForChat!.GroupId, NewMessageString);
        if (message is null)
        {
            // TODO: Create an error
            return;
        }
        DataState.Messages[DataState.SelectedFriendshipForChat.GroupId].Add(message);
        NewMessageString = string.Empty;
    }
    
    async Task MessageTextFieldHandleEnterKey(KeyboardEventArgs args)
    {
        if (args.Key=="Enter")
        {
            await SendMessage();
        }
    }
    
    public async Task OnNotify()
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        NotifierService.Notify -= OnNotify;
    }
}
