@page "/chats"

@implements IDisposable

@inject DataState DataState
@inject StatusAppClient StatusAppClient
@inject SignalRClient SignalR
@inject NotifierService NotifierService
@inject ChatService ChatService

<PageTitle>Chats</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Chats</MudText>

<MudPaper>
    <MudStack Row="true" Style="width: 100%">
        <MudList Style="width: 20%" ReadOnly="false"  SelectedValue="@_selectedChat">
            @foreach (var chat in DataState.Chats)
            {
                <MudListItem Value="@chat.Id" OnClick="async () => await SelectChat(chat)">
                    @(chat.ChatParticipants.FirstOrDefault(s => s.UserName != DataState.StatusUser.UserName).DisplayName)
                </MudListItem>
            }
        </MudList>
        <MudDivider Vertical="true" FlexItem="true" />
        <MudStack Style="width: 80%">
            @if (_selectedChat is not null)
            {
                <MudContainer Style="max-height: 55vh; height: 55vh; overflow-y: scroll">
                    <MudList T="string">
                        @foreach (var message in _selectedChat.Messages)
                        {
                            <MudListItem>
                                <MudText>@message.AuthorUserName</MudText>
                                <MudText>@message.Data</MudText>
                            </MudListItem>
                        }
                    </MudList>
                </MudContainer>
                <MudStack Row="true">
                    <MudTextField @bind-Value="@_newMessageString" OnKeyDown="MessageTextFieldHandleEnterKey" Immediate="true" Label="Send a message" Variant="Variant.Outlined"></MudTextField>
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="SendMessage">Send</MudButton>
                </MudStack>
            }
            else
            {
                <MudContainer Style="max-height: 55vh; height: 55vh">
                    <MudText Class="mt-8" Style="align-self: center" Align="Align.Center" Typo="Typo.h5">Select a chat</MudText>
                </MudContainer>
            }
        </MudStack>
    </MudStack>
</MudPaper>


@code {
    private string _newMessageString = string.Empty;
    private ChatDto? _selectedChat = null;

    protected override async Task OnInitializedAsync()
    {
        NotifierService.Notify += OnNotify;
        DataState.Chats = await StatusAppClient.GetChatsAsync();
        DataState.Friendships = await StatusAppClient.GetFriendshipsAsync(areFriends: true);
    }
    
    public async Task SelectChat(ChatDto chat)
    {
        Console.WriteLine("Selecting Chat");
        await ChatService.PopulateMessagesForChat(chat);
        _selectedChat = chat;
        StateHasChanged();
    }
    
    public async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(_newMessageString))
        {
            return;
        }
        var message = await SignalR.SendMessageAsync(_selectedChat.Id, _newMessageString);
        if (message is null)
        {
            // TODO: Create an error
            return;
        }
        _selectedChat.Messages.Add(message);
        _newMessageString = string.Empty;
    }
    
    async Task MessageTextFieldHandleEnterKey(KeyboardEventArgs args)
    {
        if (args.Key=="Enter")
        {
            await SendMessage();
        }
    }
    
    public async Task OnNotify()
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        NotifierService.Notify -= OnNotify;
    }
}
