@using StatusApp.WebUI.Services
@inherits LayoutComponentBase

@inject StatusAppClient StatusAppClient
@inject IDialogService DialogService
@inject DataState DataState
@inject AuthService AuthService
@inject SignalRClient SignalRClient


<MudThemeProvider @bind-IsDarkMode="@_isDarkMode"/>
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudSpacer />
        <MudTooltip Duration="1000" Text="@( _isDarkMode == true ? "Switch to Light Theme" : "Switch to Dark Theme")">
            <MudIconButton Icon="@( _isDarkMode == true ? @Icons.Material.Rounded.LightMode : @Icons.Material.Outlined.DarkMode)" Color="Color.Inherit" OnClick="@ToggleDarkMode"/>
        </MudTooltip>
        <MudIconButton Icon="@Icons.Custom.Brands.MudBlazor" Color="Color.Inherit" Href="https://mudblazor.com/" Target="_blank" />
        <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Href="https://github.com/MudBlazor/MudBlazor/" Target="_blank" />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">StatusApp.WebUI</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        @if (DataState.Authorized)
        {
            <MudContainer MaxWidth="MaxWidth.Large" Class="my-16 pt-16">
                @Body
            </MudContainer>
        }
    </MudMainContent>
</MudLayout>

@code {
    bool _drawerOpen = true;
    bool _isDarkMode = true;

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    
    private void ToggleDarkMode()
    {
        _isDarkMode = !_isDarkMode;
    }
    
    protected override async Task OnInitializedAsync()
    {
        DataState.Authorized = await AuthService.CheckAuthAsync();
        if (DataState.Authorized is false)
        {
            var options = new DialogOptions { CloseOnEscapeKey = false, CloseButton = false, DisableBackdropClick = true};
            var dialog = await DialogService.ShowAsync<LoginDialog>("Login", options);
            var result = await dialog.Result;
            var success = dialog.Result.IsCompletedSuccessfully;
            if (success)
            {
                DataState.Authorized = true;
                DataState.UserProfile = await StatusAppClient.GetUserAsync();
                StateHasChanged();
                await SignalRClient.StartAsync();
            }
        }
        else
        {
            DataState.UserProfile = await StatusAppClient.GetUserAsync();
            StateHasChanged();
            await SignalRClient.StartAsync();
        }
    }
}