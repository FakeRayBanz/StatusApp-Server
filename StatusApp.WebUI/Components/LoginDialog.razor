@inject StatusAppClient HttpClient
@inject DataState DataState

<MudDialog>
    <TitleContent>
        <MudButton Color="Color.Primary" OnClick="ToggleSelectedPage">Toggle</MudButton>
    </TitleContent>
    
    <DialogContent>
        @if (registerPageSelected == false)
        {
            <MudTextField @bind-Value="loginUserName" Label="Username" Variant="Variant.Text"></MudTextField>
            <MudTextField @bind-Value="loginPassword" Label="Password" Variant="Variant.Text"></MudTextField>
            @if (loginState == LoginState.Error)
            {
                <MudAlert Severity="Severity.Error" Dense="true" Class="my-2">@loginErrorMessage</MudAlert>
            }
        }
        @else
        {
            <MudTextField @bind-Value="CreateUserDto.UserName" Label="Username" Variant="Variant.Text"></MudTextField>
            <MudTextField @bind-Value="CreateUserDto.Email" Label="Email" Variant="Variant.Text"></MudTextField>
            <MudTextField @bind-Value="CreateUserDto.FirstName" Label="FirstName" Variant="Variant.Text"></MudTextField>
            <MudTextField @bind-Value="CreateUserDto.LastName" Label="LastName" Variant="Variant.Text"></MudTextField>
            <MudTextField @bind-Value="CreateUserDto.Password" Label="Password" Variant="Variant.Text"></MudTextField>
            @if (registerState == RegisterState.Error)
            {
                <MudAlert Severity="Severity.Error" Dense="true" Class="my-2">@registerErrorMessage</MudAlert>
            }
        }
    </DialogContent>
    <DialogActions>
        @if (registerPageSelected == false)
        {
            <MudButton Color="Color.Primary" OnClick="SignInAsync">Login</MudButton>
        }
        @else
        {
            <MudButton Color="Color.Primary" OnClick="RegisterAsync">Login</MudButton>
        }
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    public enum LoginState
    {
        Initial,
        Sending,
        Error
    }
    public enum RegisterState
    {
        Initial,
        Sending,
        Error
    }
    
    void Submit()
    {
        MudDialog.Close(DialogResult.Ok(true));
    }
        
    void Cancel() => MudDialog.Cancel();
    
    public string loginUserName = string.Empty;
    public string loginPassword = string.Empty;
    
    
    public string loginErrorMessage = string.Empty;
    public string registerErrorMessage = string.Empty;
    public LoginState loginState = LoginState.Initial;
    public RegisterState registerState = RegisterState.Initial;

    public bool registerPageSelected = false;

    private async Task ToggleSelectedPage()
    {
        loginUserName = string.Empty;
        loginPassword = string.Empty;
        loginErrorMessage = string.Empty;
        registerErrorMessage = string.Empty;

        loginState = LoginState.Initial;
        registerState = RegisterState.Initial;
        registerPageSelected = !registerPageSelected;
    }
    
    private async Task SignInAsync()
    {
        try
        {
            loginState = LoginState.Sending;
            //TODO: This may not be ideal behaviour
            var statusUser = await HttpClient.SignInAsync(loginUserName, loginPassword);
            DataState.StatusUser = statusUser;
            MudDialog.Close(DialogResult.Ok(true));
            
        }
        catch (ApiException e)
        {
            var statusCode = e.StatusCode;
            loginErrorMessage = statusCode switch 
            {
                401 => "Incorrect username or password",
                _ => "An error occurred"
            };
            loginState = LoginState.Error;
        }
    }

    public CreateUserDto CreateUserDto { get; set; } = new CreateUserDto();
    
    private async Task RegisterAsync()
    {
        try
        {
            registerState = RegisterState.Sending;
            //TODO: This may not be ideal behaviour
            var statusUser = await HttpClient.CreateUserAsync(CreateUserDto);
            DataState.StatusUser = statusUser;
            MudDialog.Close(DialogResult.Ok(true));
            
        }
        catch (ApiException e)
        {
            var statusCode = e.StatusCode;
            registerErrorMessage = statusCode switch 
            {
                400 => "An error occurred when creating your account",
                _ => "An error occurred"
                };
            registerState = RegisterState.Error;
        }
    }
}

