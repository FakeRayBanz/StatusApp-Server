@inject StatusAppClient HttpClient
@inject DataState DataState
@inject NotifierService NotifierService

@if (DataState.FriendList.Count > 0)
{
    <MudStack Style="width: fit-content">
        @foreach (var friend in DataState.FriendList)
            {
                <MudCard Elevation="2">
                    <MudCardContent>
                        <MudStack Row="true" Justify="Justify.SpaceBetween">
                            <MudStack>
                                <MudText Typo="Typo.h6">@friend.FirstName @friend.LastName</MudText>
                                <MudText Typo="Typo.body2">@friend.Status</MudText>
                            </MudStack>
                            <MudAvatar Color="@(friend.Online ? Color.Success : Color.Error)"></MudAvatar>
                        </MudStack>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Text" Color="Color.Primary">Chat</MudButton>
                    </MudCardActions>
                </MudCard>
            }
    </MudStack>
    
}

@code {
    
    protected override async Task OnInitializedAsync()
    {
        NotifierService.Notify += OnNotify;
        DataState.FriendList = new List<Profile>(await HttpClient.GetFriendsAsync());
        StateHasChanged();
    }
    
    // https://learn.microsoft.com/en-us/aspnet/core/blazor/components/?view=aspnetcore-7.0#invoke-component-methods-externally-to-update-state
    public async Task OnNotify()
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        NotifierService.Notify -= OnNotify;
    }
}
