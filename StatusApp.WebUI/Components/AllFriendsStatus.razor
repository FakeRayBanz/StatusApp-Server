@inject StatusAppClient StatusAppClient
@inject DataState DataState
@inject NotifierService NotifierService
@inject ChatService ChatService


<MudText Class="mb-8" GutterBottom="true">
    @(DataState.FriendList.Count == 0
        ? "Add some friends to see their statuses here!"
        : "See your friends' statuses here!")
</MudText>

<MudStack Style="width: fit-content">
@if (DataState.FriendList.Count > 0)
{
    @foreach (var friend in DataState.FriendList)
        {
            <MudCard Elevation="2">
                <MudCardContent>
                    <MudStack Row="true" Justify="Justify.SpaceBetween">
                        <MudStack>
                            <MudText Typo="Typo.h6">@friend.FirstName @friend.LastName</MudText>
                            <MudText Typo="Typo.body2">@friend.Status</MudText>
                        </MudStack>
                        <MudAvatar Color="@(friend.Online ? Color.Success : Color.Error)"></MudAvatar>
                    </MudStack>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Text" Color="Color.Primary" Href="/chats" OnClick="() => OpenChat(friend)">Chat</MudButton>
                </MudCardActions>
            </MudCard>
        }
}
    <MudButton Color="Color.Primary" Variant="Variant.Filled">Add Friends</MudButton>
</MudStack>

@code {
    
    protected override async Task OnInitializedAsync()
    {
        NotifierService.Notify += OnNotify;
        DataState.FriendList = await StatusAppClient.GetFriendsAsync();
        DataState.Friendships = await StatusAppClient.GetFriendshipsAsync(areFriends: true);
        StateHasChanged();
    }
    
    public async Task OpenChat(StatusUserDto friend)
    {
        var friendship = DataState.Friendships.FirstOrDefault(s => s.FriendUserName == friend.UserName);
        await ChatService.SelectChat(friendship);
    }

    // https://learn.microsoft.com/en-us/aspnet/core/blazor/components/?view=aspnetcore-7.0#invoke-component-methods-externally-to-update-state
    public async Task OnNotify()
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        NotifierService.Notify -= OnNotify;
    }
}
